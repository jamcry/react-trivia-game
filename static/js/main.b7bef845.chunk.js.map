{"version":3,"sources":["components/styled/styledComponents.js","components/common/GameSettingsForm.js","pages/WelcomePage.js","pages/CorrectAnswerPage.js","pages/WrongAnswerPage.js","helpers/shuffleArray.js","components/common/CircularTimerView.js","pages/QuestionPage.js","pages/WinPage.js","pages/TimeIsUpPage.js","components/common/OverlayLoader.js","helpers/constants.js","App.js","serviceWorker.js","index.js"],"names":["CenteredFlexDiv","styled","div","Container","AbsoluteOverlayContainer","Header","HeaderText","h1","CenteredIcon","Button","button","ActionButton","StartButton","AnimatedStartButton","text","props","HomeButton","AnimatedHomeButton","AnswerButton","Text","big","bold","color","QuestionText","Form","form","Select","select","GameSettingsForm","state","category","difficulty","handleChange","e","setState","target","name","value","handleSubmit","preventDefault","onSubmit","this","onChange","Component","WelcomePage","startGame","options","animationData","CorrectAnswerPage","goNextQuestion","totalPoints","lastEarnedPoints","loop","onClick","WrongAnswerPage","resetGame","numOfCorrectAnswers","arr","sort","Math","random","TimerContainer","CircularTimerView","duration","remaining","percentage","colorRGB","barStyles","path","stroke","fill","fontSize","styles","QuestionPage","question","remainingSeconds","decrementRemainingSeconds","prevState","componentDidMount","data","correct_answer","incorrect_answers","shuffleArray","timer","setInterval","componentDidUpdate","handleTimeOver","componentWillUnmount","clearInterval","answerButtons","map","option","index","key","handleAnswer","he","decode","WinPage","TimeIsUpPage","OverlayLoader","PAGES","INITIAL_GAME_STATE","currentPage","questions","numOfQuestions","indexOfCurrentQuestion","currentQuestion","App","fetchQuestionData","categoryId","isLoading","url","fetch","then","res","json","results","length","window","alert","catch","err","console","error","message","answer","pointsForQuestion","getNextQuestion","questionNumber","currentComponent","headerContent","className","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b7bef845.chunk.js","sourcesContent":["import styled from 'styled-components';\nimport React from 'react';\n\nconst CenteredFlexDiv = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst Container = styled(CenteredFlexDiv)`\n  flex-direction: column;\n  justify-content: flex-start;\n  padding: 0.5rem;\n  height: 100%;\n`;\n\nconst AbsoluteOverlayContainer = styled(CenteredFlexDiv)`\n  z-index: 999;\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background: rgba(0, 0, 0, 0.8);\n`;\n\nconst Header = styled(CenteredFlexDiv)`\n  width: 100%;\n  background: #333;\n  height: 5rem !important;\n  color: white;\n  margin-bottom: 1rem;\n`;\n\nconst HeaderText = styled.h1`\n  font-size: 1.4rem;\n  letter-spacing: 1px;\n`;\n\nconst CenteredIcon = styled(CenteredFlexDiv)`\n  width: 256px;\n  height: 256px;\n  margin-top: 0.5rem;\n  margin-bottom: 1rem;\n`;\n\nconst Button = styled.button`\n  padding: 0.4rem;\n  margin: 0.4rem;\n  background: none;\n  border: 1px solid black;\n  border-radius: 5px;\n  color: black;\n  transition: 0.3s ease-out;\n  &:hover {\n    cursor: pointer;\n  }\n`;\n\nconst ActionButton = styled(Button)`\n  padding: 1.15rem;\n  background: rgba(18, 133, 153, 0.75);\n  color: white;\n  border: none;\n  letter-spacing: 2px;\n  margin-top: 1.25rem;\n  width: 100%;\n  max-width: 800px;\n  &:hover {\n    background: rgba(18, 133, 153, 1);\n  }\n`;\n\n// Animated Start Button\n// Button animations was adapted from: https://www.w3schools.com/howto/howto_css_animate_buttons.asp\nconst StartButton = styled(ActionButton)`\n  transition: all 0.5s;\n  span {\n    display: inline-block;\n    text-transform: uppercase;\n    font-size: 18px;\n    position: relative;\n    transition: 0.3s;\n    &:after {\n      content: '→';\n      position: absolute;\n      opacity: 0;\n      top: 0;\n      right: -20px;\n      transition: 0.3s;\n    }\n  }\n  &:hover {\n    span {\n      padding-right: 25px;\n      &:after {\n        opacity: 1;\n        right: 0;\n      }\n    }\n  }\n`;\n\n// Wrapper Component For Start Button\nconst AnimatedStartButton = ({ text, ...props }) => {\n  return (\n    <StartButton {...props}>\n      <span>{text}</span>\n    </StartButton>\n  );\n};\n\n// Animated Home Button\nconst HomeButton = styled(ActionButton)`\n  transition: all 0.5s;\n  span {\n    display: inline-block;\n    text-transform: uppercase;\n    font-size: 18px;\n    position: relative;\n    transition: 0.3s;\n    &:before {\n      content: '←';\n      position: absolute;\n      opacity: 0;\n      top: 0;\n      left: -20px;\n      transition: 0.3s;\n    }\n  }\n  &:hover {\n    span {\n      padding-left: 25px;\n      &:before {\n        opacity: 1;\n        left: 0;\n      }\n    }\n  }\n`;\n\n// Wrapper Component For Home Button\nconst AnimatedHomeButton = ({ text, ...props }) => {\n  return (\n    <HomeButton {...props}>\n      <span>{text}</span>\n    </HomeButton>\n  );\n};\n\nconst AnswerButton = styled(Button)`\n  width: 100%;\n  max-width: 800px;\n  margin: 0.5rem 0;\n  border: 0;\n  background: #999;\n  color: white;\n  border-bottom: 5px solid #666;\n  padding: 1rem;\n  &:hover {\n    background: #de6d1d;\n    border-color: #9b4c14;\n  }\n  &:active {\n    background: #deae1d;\n    border-color: #c49404;\n    box-shadow: inset 0 0 10px #b38807;\n  }\n`;\n\nconst Text = styled.div`\n  line-height: 1.5rem;\n  margin: 0.75rem 0.5rem 0.25rem 0.5rem;\n  font-size: ${props => (props.big ? '36px' : '16px')};\n  font-weight: ${props => props.bold && 'bold'};\n  color: ${props => props.color};\n`;\n\nconst QuestionText = styled(Text)`\n  margin-bottom: 2.5rem;\n`;\n\nconst Form = styled.form`\n  display: flex;\n  align-items: center;\n  flex-direction: column;\n  width: 80%;\n  max-width: 800px;\n`;\n\nconst Select = styled.select`\n  width: 100%;\n  margin-bottom: 0.75rem;\n  height: 3.5rem;\n`;\n\nexport {\n  CenteredFlexDiv,\n  Container,\n  AbsoluteOverlayContainer,\n  Header,\n  HeaderText,\n  CenteredIcon,\n  Button,\n  ActionButton,\n  AnswerButton,\n  Text,\n  QuestionText,\n  Form,\n  Select,\n  AnimatedStartButton,\n  AnimatedHomeButton,\n  StartButton\n};\n","import React, { Component } from 'react';\nimport { Text, Select, AnimatedStartButton, Form } from '../styled/styledComponents';\n\nclass GameSettingsForm extends Component {\n  state = {\n    category: '',\n    difficulty: 'easy'\n  };\n\n  handleChange = e => {\n    this.setState({\n      [e.target.name]: e.target.value\n    });\n  };\n\n  handleSubmit = e => {\n    e.preventDefault();\n    const { category, difficulty } = this.state;\n    this.props.handleSubmit(category, difficulty);\n  };\n\n  render() {\n    return (\n      <Form onSubmit={this.handleSubmit}>\n        <Text bold>Select Category</Text>\n\n        <Select name=\"category\" value={this.state.category} onChange={this.handleChange}>\n          <option value=\"\">Any Category</option>\n          <option value=\"9\">General Knowledge</option>\n          <option value=\"10\">Entertainment: Books</option>\n          <option value=\"11\">Entertainment: Film</option>\n          <option value=\"12\">Entertainment: Music</option>\n          <option value=\"13\">Entertainment: Musicals &amp; Theatres</option>\n          <option value=\"14\">Entertainment: Television</option>\n          <option value=\"15\">Entertainment: Video Games</option>\n          <option value=\"16\">Entertainment: Board Games</option>\n          <option value=\"17\">Science &amp; Nature</option>\n          <option value=\"18\">Science: Computers</option>\n          <option value=\"19\">Science: Mathematics</option>\n          <option value=\"20\">Mythology</option>\n          <option value=\"21\">Sports</option>\n          <option value=\"22\">Geography</option>\n          <option value=\"23\">History</option>\n          <option value=\"24\">Politics</option>\n          <option value=\"25\">Art</option>\n          <option value=\"26\">Celebrities</option>\n          <option value=\"27\">Animals</option>\n          <option value=\"28\">Vehicles</option>\n          <option value=\"29\">Entertainment: Comics</option>\n          <option value=\"30\">Science: Gadgets</option>\n          <option value=\"31\">Entertainment: Japanese Anime &amp; Manga</option>\n          <option value=\"32\">Entertainment: Cartoon &amp; Animations</option>\n        </Select>\n\n        <Text bold>Select Difficulty</Text>\n        <Select name=\"difficulty\" value={this.state.difficulty} onChange={this.handleChange}>\n          <option value=\"easy\">Easy</option>\n          <option value=\"medium\">Medium</option>\n          <option value=\"hard\">Hard</option>\n        </Select>\n\n        <AnimatedStartButton text=\"Start\" />\n      </Form>\n    );\n  }\n}\n\nexport default GameSettingsForm;\n","import React from 'react';\nimport Lottie from 'react-lottie';\nimport * as animationData from '../assets/animation/trivia-animation.json';\nimport GameSettingsForm from '../components/common/GameSettingsForm';\nimport { Container, CenteredIcon } from '../components/styled/styledComponents';\n\nconst WelcomePage = ({ startGame }) => {\n  return (\n    <Container>\n      <CenteredIcon>\n        <Lottie options={{ animationData: animationData.default }} />\n      </CenteredIcon>\n\n      <GameSettingsForm handleSubmit={startGame} />\n    </Container>\n  );\n};\n\nexport default WelcomePage;\n","import React from 'react';\nimport Lottie from 'react-lottie';\nimport * as animationData from '../assets/animation/correct-animation.json';\nimport { Container, CenteredIcon, Text, ActionButton } from '../components/styled/styledComponents';\n\nconst CorrectAnswerPage = ({ goNextQuestion, totalPoints, lastEarnedPoints }) => {\n  return (\n    <Container>\n      <CenteredIcon>\n        <Lottie options={{ animationData: animationData.default, loop: false }} />\n      </CenteredIcon>\n\n      <Text color=\"green\" bold big>\n        Correct!\n      </Text>\n\n      <Text>You have earned {lastEarnedPoints} pts!</Text>\n\n      <Text bold>Total: {totalPoints} pts</Text>\n\n      <ActionButton onClick={goNextQuestion}>Next Question</ActionButton>\n    </Container>\n  );\n};\n\nexport default CorrectAnswerPage;\n","import React from 'react';\nimport Lottie from 'react-lottie';\nimport * as animationData from '../assets/animation/wrong-animation.json';\nimport {\n  Container,\n  CenteredIcon,\n  Text,\n  AnimatedHomeButton\n} from '../components/styled/styledComponents';\n\nconst WrongAnswerPage = ({ resetGame, totalPoints, numOfCorrectAnswers }) => {\n  return (\n    <Container>\n      <CenteredIcon>\n        <Lottie options={{ animationData: animationData.default, loop: false }} />\n      </CenteredIcon>\n\n      <Text color=\"red\" bold big>\n        Wrong!\n      </Text>\n\n      <Text>\n        You have answered {numOfCorrectAnswers} questions correctly, collected {totalPoints} pts.\n      </Text>\n\n      <AnimatedHomeButton text=\"Go Home\" onClick={resetGame} />\n    </Container>\n  );\n};\n\nexport default WrongAnswerPage;\n","/* Shuffles the items in the input array\n Source: https://javascript.info/task/shuffle */\nexport default arr => {\n  return arr.sort(() => Math.random() - 0.5);\n};\n","import React from 'react';\nimport { CircularProgressbar } from 'react-circular-progressbar';\nimport 'react-circular-progressbar/dist/styles.css';\nimport styled from 'styled-components';\n\nconst TimerContainer = styled.div`\n  width: 5rem;\n  height: 5rem;\n  margin-bottom: 1.5rem;\n`;\n\nconst CircularTimerView = ({ duration, remaining }) => {\n  // Calculate the percentage of the remaining seconds\n  const percentage = (remaining / duration) * 100;\n\n  // Color turns red below 25% of the duration remaining\n  const colorRGB = percentage < 25 ? '255,0,0' : '62,152,199';\n\n  // Define style rules for CircularProgressBar\n  const barStyles = {\n    path: {\n      stroke: `rgba(${colorRGB})`\n    },\n    text: {\n      fill: `rgb(${colorRGB})`,\n      fontSize: '2.5rem'\n    }\n  };\n\n  return (\n    <TimerContainer>\n      <CircularProgressbar value={percentage} text={remaining} styles={barStyles} />\n    </TimerContainer>\n  );\n};\n\nexport default CircularTimerView;\n","import React, { Component } from 'react';\nimport he from 'he'; // for decoding HTML encoded question texts\nimport shuffleArray from '../helpers/shuffleArray';\nimport CircularTimerView from '../components/common/CircularTimerView';\nimport { Container, QuestionText, AnswerButton } from '../components/styled/styledComponents';\n\nclass QuestionPage extends Component {\n  state = {\n    question: '',\n    options: [],\n    remainingSeconds: 15\n  };\n\n  decrementRemainingSeconds = () => {\n    this.setState(prevState => ({\n      remainingSeconds: prevState.remainingSeconds - 1\n    }));\n  };\n\n  componentDidMount = () => {\n    const { question, correct_answer, incorrect_answers } = this.props.data;\n    const options = shuffleArray([correct_answer, ...incorrect_answers]);\n    const timer = setInterval(this.decrementRemainingSeconds, 1000);\n    this.setState({\n      question,\n      options,\n      timer\n    });\n  };\n\n  componentDidUpdate = () => {\n    if (this.state.remainingSeconds === 0) {\n      this.props.handleTimeOver();\n    }\n  };\n\n  componentWillUnmount = () => {\n    // Stop the timer before unmounting\n    clearInterval(this.state.timer);\n  };\n\n  render() {\n    const answerButtons = this.state.options.map((option, index) => (\n      <AnswerButton\n        key={`option_${index}`}\n        onClick={() => this.props.handleAnswer(option, this.state.remainingSeconds)}\n      >\n        {he.decode(option)}\n      </AnswerButton>\n    ));\n\n    return (\n      <Container>\n        <CircularTimerView duration={15} remaining={this.state.remainingSeconds} />\n\n        <QuestionText>{he.decode(this.state.question)}</QuestionText>\n\n        {answerButtons}\n      </Container>\n    );\n  }\n}\n\nexport default QuestionPage;\n","import React from 'react';\nimport Lottie from 'react-lottie';\nimport * as animationData from '../assets/animation/win-animation.json';\nimport {\n  Container,\n  CenteredIcon,\n  Text,\n  AnimatedHomeButton\n} from '../components/styled/styledComponents';\n\nconst WinPage = ({ resetGame, numOfCorrectAnswers, totalPoints }) => {\n  return (\n    <Container>\n      <CenteredIcon>\n        <Lottie options={{ animationData: animationData.default }} />\n      </CenteredIcon>\n\n      <Text color=\"green\" bold big>\n        You Win!\n      </Text>\n\n      <Text>\n        Congratulations! You have answered all of the {numOfCorrectAnswers} questions correctly!\n      </Text>\n      <Text bold>Total: {totalPoints} pts</Text>\n\n      <AnimatedHomeButton text=\"Go Home\" onClick={resetGame} />\n    </Container>\n  );\n};\n\nexport default WinPage;\n","import React from 'react';\nimport Lottie from 'react-lottie';\nimport * as animationData from '../assets/animation/time-is-up-animation.json';\nimport {\n  Container,\n  CenteredIcon,\n  Text,\n  AnimatedHomeButton\n} from '../components/styled/styledComponents';\n\nconst TimeIsUpPage = ({ resetGame, totalPoints }) => {\n  return (\n    <Container>\n      <CenteredIcon>\n        <Lottie options={{ animationData: animationData.default, loop: false }} />\n      </CenteredIcon>\n\n      <Text color=\"red\" bold big>\n        Time's Up!\n      </Text>\n\n      <Text>You haven't answered the question in 15 seconds! Game Over!</Text>\n      <Text bold>Total: {totalPoints} pts</Text>\n\n      <AnimatedHomeButton text=\"Try Again\" onClick={resetGame} />\n    </Container>\n  );\n};\n\nexport default TimeIsUpPage;\n","import React from 'react';\nimport Lottie from 'react-lottie';\nimport * as animationData from '../../assets/animation/loader-animation.json';\nimport { AbsoluteOverlayContainer } from '../styled/styledComponents.js';\n\nconst OverlayLoader = () => {\n  return (\n    <AbsoluteOverlayContainer>\n      <Lottie options={{ animationData: animationData.default }} />\n    </AbsoluteOverlayContainer>\n  );\n};\n\nexport default OverlayLoader;\n","// Constant variables for page names\nexport const PAGES = {\n  WELCOME_PAGE: 'WELCOME_PAGE',\n  QUESTION_PAGE: 'QUESTION_PAGE',\n  CORRECT_ANSWER_PAGE: 'CORRECT_ANSWER_PAGE',\n  WRONG_ANSWER_PAGE: 'WRONG_ANSWER_PAGE',\n  WIN_PAGE: 'WIN_PAGE',\n  TIMES_UP_PAGE: 'TIMES_UP_PAGE'\n};\n\n// Base URL of OpenTriviaDB API\nexport const OPEN_TRIVIA_BASE_URL = 'https://opentdb.com/api.php';\n\n// Initial state for game\nexport const INITIAL_GAME_STATE = {\n  currentPage: PAGES.WELCOME_PAGE,\n  questions: [],\n  numOfQuestions: 0,\n  indexOfCurrentQuestion: -1,\n  numOfCorrectAnswers: 0,\n  currentQuestion: null,\n  totalPoints: 0\n};\n","import React, { Component } from 'react';\nimport WelcomePage from './pages/WelcomePage';\nimport CorrectAnswerPage from './pages/CorrectAnswerPage';\nimport WrongAnswerPage from './pages/WrongAnswerPage';\nimport QuestionPage from './pages/QuestionPage';\nimport WinPage from './pages/WinPage';\nimport TimeIsUpPage from './pages/TimeIsUpPage';\nimport { Header, HeaderText } from './components/styled/styledComponents';\nimport OverlayLoader from './components/common/OverlayLoader';\nimport { INITIAL_GAME_STATE, PAGES, OPEN_TRIVIA_BASE_URL } from './helpers/constants';\n\nclass App extends Component {\n  state = INITIAL_GAME_STATE;\n\n  // Fetches question data via API and saves it into state\n  fetchQuestionData = (categoryId = '', difficulty = 'easy') => {\n    this.setState({ isLoading: true });\n    const numOfQuestions = 10;\n    // Open Trivia DB API Reference: https://opentdb.com/api_config.php\n    const url =\n      OPEN_TRIVIA_BASE_URL +\n      `?amount=${numOfQuestions}&category=${categoryId}&difficulty=${difficulty}`;\n    fetch(url)\n      .then(res => res.json())\n      .then(data => {\n        if (data.results.length === 0) {\n          this.setState({\n            isLoading: true\n          });\n          window.alert(\n            'No questions for this category! Please choose another one or try again later.'\n          );\n        } else {\n          this.setState({\n            currentPage: PAGES.QUESTION_PAGE,\n            questions: data.results,\n            numOfQuestions: data.results.length,\n            isLoading: false,\n            indexOfCurrentQuestion: 0,\n            currentQuestion: data.results[0]\n          });\n        }\n      })\n      .catch(err => console.error(err.message));\n  };\n\n  resetGame = () => {\n    this.setState(INITIAL_GAME_STATE);\n  };\n\n  handleAnswer = (answer, remainingSeconds) => {\n    const correctAnswer = this.state.currentQuestion.correct_answer;\n    if (answer === correctAnswer) {\n      // Calculate the earned point with respect to remaining time (Bonus#5)\n      const pointsForQuestion = 50 + remainingSeconds * 10;\n\n      this.setState(prevState => ({\n        currentPage:\n          // Return to Win Page if current question is the last one\n          prevState.numOfCorrectAnswers + 1 === prevState.numOfQuestions\n            ? PAGES.WIN_PAGE\n            : PAGES.CORRECT_ANSWER_PAGE,\n        totalPoints: prevState.totalPoints + pointsForQuestion,\n        lastEarnedPoints: pointsForQuestion,\n        numOfCorrectAnswers: prevState.numOfCorrectAnswers + 1\n      }));\n    } else {\n      this.setState({\n        currentPage: PAGES.WRONG_ANSWER_PAGE\n      });\n    }\n  };\n\n  handleTimeOver = () => {\n    this.setState({\n      currentPage: PAGES.TIMES_UP_PAGE\n    });\n  };\n\n  getNextQuestion = () => {\n    this.setState(prevState => ({\n      indexOfCurrentQuestion: prevState.indexOfCurrentQuestion + 1,\n      currentQuestion: prevState.questions[prevState.indexOfCurrentQuestion + 1],\n      currentPage: PAGES.QUESTION_PAGE\n    }));\n  };\n\n  render() {\n    const { currentPage, numOfQuestions, indexOfCurrentQuestion } = this.state;\n    const questionNumber = indexOfCurrentQuestion + 1; //prevent-off-by-one\n\n    let currentComponent = null;\n    let headerContent = <HeaderText>React Trivia Game</HeaderText>;\n\n    /*\n     Create the component to render according to the currently selected page.\n     Acts like a simple router.\n    */\n\n    if (currentPage === PAGES.WELCOME_PAGE) {\n      currentComponent = <WelcomePage startGame={this.fetchQuestionData} />;\n    }\n\n    if (currentPage === PAGES.QUESTION_PAGE) {\n      headerContent = `Question ${questionNumber} / ${numOfQuestions}`;\n      currentComponent = (\n        <QuestionPage\n          data={this.state.currentQuestion}\n          handleAnswer={this.handleAnswer}\n          handleTimeOver={this.handleTimeOver}\n        />\n      );\n    }\n\n    if (currentPage === PAGES.CORRECT_ANSWER_PAGE) {\n      headerContent = `Question ${questionNumber} / ${numOfQuestions}`;\n      currentComponent = (\n        <CorrectAnswerPage\n          goNextQuestion={this.getNextQuestion}\n          totalPoints={this.state.totalPoints}\n          lastEarnedPoints={this.state.lastEarnedPoints}\n        />\n      );\n    }\n\n    if (currentPage === PAGES.WRONG_ANSWER_PAGE) {\n      headerContent = `Question ${questionNumber} / ${numOfQuestions}`;\n      currentComponent = (\n        <WrongAnswerPage\n          numOfCorrectAnswers={this.state.numOfCorrectAnswers}\n          totalPoints={this.state.totalPoints}\n          resetGame={this.resetGame}\n        />\n      );\n    }\n\n    if (currentPage === PAGES.TIMES_UP_PAGE) {\n      headerContent = `Time's Up!`;\n      currentComponent = (\n        <TimeIsUpPage totalPoints={this.state.totalPoints} resetGame={this.resetGame} />\n      );\n    }\n\n    if (currentPage === PAGES.WIN_PAGE) {\n      headerContent = `YOU WIN !`;\n      currentComponent = (\n        <WinPage\n          numOfCorrectAnswers={this.state.numOfCorrectAnswers}\n          totalPoints={this.state.totalPoints}\n          resetGame={this.resetGame}\n        />\n      );\n    }\n\n    return (\n      <div className=\"App\">\n        <Header>{headerContent}</Header>\n        {this.state.isLoading && <OverlayLoader />}\n        {currentComponent}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}